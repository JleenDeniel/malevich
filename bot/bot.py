import os

import numpy as np
import random
from coolname import generate
from mlem.api import load
from mlem.runtime.client import HTTPClient
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove

# create a telegram bot and paste it here, or use `flyctl secrets set TELEGRAM_TOKEN=token` to set it secretly
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TOKEN")
# add URL of you REST API app here
#–Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —Ö–æ—Å—Ç –Ω–∞ –Ω–∞—à
client = HTTPClient(host="https://art-expert-267.fly.dev/", port=None)

async def hello(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f'Hello {update.effective_user.first_name}')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /start is issued."""
    button = ReplyKeyboardMarkup([['–ó–¥–∞—Ä–æ–≤–∞, –õ—ë—Ö, –µ—Å—Ç—å –º–∏–Ω—É—Ç–∫–∞? –Ø –∫–æ–µ-—á—ë —Å–¥–µ–ª–∞–ª, —Ç–∏–ø–æ –∞—Ä—Ç, –º–æ–∂–µ—à—å –∑–∞—Ü–µ–Ω–∏—Ç—å?']], resize_keyboard=True, one_time_keyboard = True)
    await update.message.reply_text(
        reply_markup=button,
        text = f"–ó–¥–∞—Ä–æ–≤–∞, {update.effective_user.first_name}! –ß—ë –∫–∞–∫?",
    )

async def ready_to_estimate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /start is issued."""
    await update.message.reply_text(
        text = f"–î–∞, –¥–∞–≤–∞–π –∫–∏–¥–∞–π —Å–≤–æ—ë —Ö—É–¥–æ–∂–µ—Å—Ç–≤–æ: —Ñ–æ—Ç–∫–æ–π –ø—Ä—è–º –≤ —á–∞—Ç",
    )

text_send_answers = [
    '–ß—ë —Ç—ã –º–Ω–µ —Ç—É—Ç –ø–∏—à–µ—à—å! –î–∞–≤–∞–π –ø–æ –¥–µ–ª—É: —Ç—ã –∫–∏–¥–∞–µ—à—å —Ñ–æ—Ç–∫—É - —è –æ—Ü–µ–Ω–∏–≤–∞—é', 
    '–•–∞—Ä–æ—à —Å—Ç—Ä–æ—á–∏—Ç—å. –ü—Ä–∏—Å—ã–ª–∞–π —Ñ–æ—Ç–∫—É, —è –æ—Ü–µ–Ω—é', 
    '–≠–π, –±—É–∫–≤–æ–µ–¥, –º–µ–Ω—å—à–µ —Å–ª–æ–≤ - –±–æ–ª—å—à–µ –¥–µ–ª–∞. –ü—Ä–∏—Å—ã–ª–∞–π —Ñ–æ—Ç–∫—É —Å–≤–æ–µ–≥–æ –∞—Ä—Ç–∞'
]

async def any_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send an alert if see any text message"""
    await update.message.reply_text(
        text = random.choice(text_send_answers),
    )         


def round50(n):
    x = n // 50
    low = int(x * 50)
    up = int((x+1) * 50)
    return {
        'up': up,
        'low': low
    }


answers_for_300max = [
    '–ù–∞–¥–µ—é—Å—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–≤–æ–µ –ø–µ—Ä–≤–æ–µ —Ç–≤–æ—Ä–µ–Ω–∏–µ',
    '–£–≥–∞—Ä–∞–µ—à—å? –≠—Ç–æ –∏–∑ –¥–µ—Ç—Å–∫–æ–≥–æ —Å–∞–¥–∞?',
    '–ü–æ—Å–º–µ—è–ª–∏—Å—å —Å –ø–∞—Ü–∞–Ω–∞–º–∏ –æ—Ç –¥—É—à–∏.',
    '–ï—Å–ª–∏ –æ—Ç–æ–π—Ç–∏ –Ω–∞ –∫–∏–ª–æ–º–µ—Ç—Ä - –≤—ã–≥–ª—è–¥–∏—Ç —Å–Ω–æ—Å–Ω–æ. –ê —Ç–∞–∫ –∫–æ–Ω–µ—á–Ω–æ –¥–∏—á—å.'
]

answers_for_600max = [
    '–ù—É, –ø–ª—é—Å –º–∏–Ω—É—Å —Å –ø–∏–≤–æ–º –ø–æ–π–¥–µ—Ç.',
    '–ù–µ —Ç–æ —á—Ç–æ–±—ã –ø–æ –≤–∫—É—Å—É –≤–∫—É—Å–Ω–æ, –Ω–æ –ø–æ —Å—É—Ç–∏ –Ω–∏—á–µ–≥–æ —Ç–∞–∫.',
    '–ë–æ–ª–µ–µ–ª–∏–º–µ–Ω–µ–µ –Ω–æ—Ä–º.'
]


async def estimate_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    #–∑–¥–µ—Å—å –º—ã –≥–æ—Ç–æ–≤–∏–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è predict price
    user = update.message.from_user
    photo_file = await update.message.photo[-1].get_file()
    await photo_file.download_to_drive('user_photo.jpg')
    res = client.predict("user_photo.jpg")
    price = res["price"]

    #–∞ –∑–¥–µ—Å—å —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
    if price < 0:
        text = 'üí©üí©üí© –¢–µ–±–µ –µ—â–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç –ø—Ä–∏–ø–ª–∞—Ç–∏—Ç—å, —á—Ç–æ–±—ã —ç—Ç–æ –∫—Ç–æ-—Ç–æ –∫—É–ø–∏–ª'

    if price == 0:
        text = 'ü•± –≠—Ç–æ —Ç–≤–æ–π —Ä–µ–±–µ–Ω–æ–∫ —Å–¥–µ–ª–∞–ª? 0 –¥–æ–ª–ª–∞—Ä–æ–≤ - –∏ –Ω–∏ —Ü–µ–Ω—Ç–∞ –±–æ–ª—å—à–µ'

    if 0 < price < 300:
        text = 'üëé {} –ë–∞–∫—Å–æ–≤ {} –º–∞–∫—Å–∏–º—É–º.'.format(random.choice(answers_for_300max), round50(price)['up'])

    if 300 <= price < 600:
        text = 'ü§î {} –î—É–º–∞—é, –±–∞–∫—Å–æ–≤ {} - {}'.format(random.choice(answers_for_600max), round50(price)['low'], round50(price)['up'])

    if 600 <= price < 1200:
        text = 'üëçüèº –ù–æ—Ä–º–∞–ª—ë–∫, –ø—Ä–∏–∫–æ–ª—å–Ω–æ, –º–æ–∂–Ω–æ –Ω–∞ –ø–æ–ª–∫—É –≤ —Ç—É–∞–ª–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å. –ë–∞–∫—Å–æ–≤ {} - {} –º–æ–≥—É—Ç –¥–∞—Ç—å.'.format(round50(price)['low'], round50(price)['up'])

    if 1200 <= price < 2500:
        text = 'üé®üßë‚Äçüé®üñå –í–æ—É, –∞ —Ç—ã –¥–∞–≤–Ω–æ –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è –∞—Ä—Ç–æ–º? –°–µ—Ä—å–µ–∑–Ω–æ —Å—Ç–µ–ª–∏—à—å. –ú–æ–≥—É –ø—Ä–æ–¥–∞—Ç—å –∑–∞ {} –±–∞–∫—Å–æ–≤, –Ω–æ –≤–æ–∑—å–º—É –∫–æ–º–∏—Å—Å–∏—é.'.format(round50(price)['up'])

    if 2500 <= price < 10000:
        text = 'üî•üí•‚ö°Ô∏è –ß–µ–ª, —Ö–∞—Ä–æ–æ–æ—à. –ó–≤–æ–Ω—é –≤ —Å–æ—Ç–±–∏—Å, –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –∫—ç—à. –≠—Ç–æ –º–∏–Ω–∏–º—É–º {}$, –∞ —Ç–∞–º –∫–∞–∫ —Å—Ç–æ—Ä–≥—É–µ–º—Å—è.'.format(round50(price)['low'])

    if price >= 10000:
        text = 'üíµüíµüíµ –ü–æ—Ö–æ–¥—É —Ä–µ—á—å –∏–¥–µ—Ç –æ –ø—è—Ç–∏–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–ª–∞—Ö. –¢—ã –≥–¥–µ –∂–∏–≤–µ—à—å? –ú—ã —Å –ø–∞—Ä–Ω—è–º–∏ –ø–æ–¥—ä–µ–¥–µ–º, –ø–æ–º–æ–∂–µ–º.'

    await update.message.reply_text(
        text
    )


def main():
    #–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("hello", hello))
    app.add_handler(MessageHandler(filters.PHOTO, estimate_price))
    app.add_handler(MessageHandler(filters.Text('–ó–¥–∞—Ä–æ–≤–∞, –õ—ë—Ö, –µ—Å—Ç—å –º–∏–Ω—É—Ç–∫–∞? –Ø –∫–æ–µ-—á—ë —Å–¥–µ–ª–∞–ª, —Ç–∏–ø–æ –∞—Ä—Ç, –º–æ–∂–µ—à—å –∑–∞—Ü–µ–Ω–∏—Ç—å?'), ready_to_estimate))
    app.add_handler(MessageHandler(filters.TEXT, any_text_message))

    app.run_polling()



if __name__ == "__main__":
    main()
